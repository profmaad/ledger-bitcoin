#!/usr/bin/env ruby

require 'trollop'

require 'ledger-bitcoin'

opts = Trollop::options do
  version "bitstamp2ledger, part of ledger-bitcoin #{LedgerBitcoin.version_string} (c) Maximilian Wolter (Prof. MAAD) 2013"

  banner <<-EOS
bitstamp2ledger retrieves the transaction history from a Bitstamp account via the Bitstamp API and outputs it as ledger transactions.

Usage:
\tbitstamp2ledger [options] <bitstamp assets account> <bitstamp fees expenses account> [<bitstamp_transactions.csv file>]

where <bitstamp assets account> is your ledger assets account for this bitstamp account, holding both the USD and BTC balance and <bitstamp fees expenses account> is your ledger expenses account to charge the trading fees to.
If the optional <bitstamp_transactions.csv file> parameter is specified, the transactions will be read from that csv file exported from Bitstamp via the website, otherwise the history will be retrieved via the Bitstamp API.

The following [options] are available:
EOS

  opt :old_transactions, 'Include old (already imported) transactions in the output (also see \'ledger-file\' option)', short: 'o', default: false

  opt :config, 'Path to ledger-bitcoin config file', short: 'c', type: :string, default: '~/.ledgerbitcoinrc'
  opt :ledger_file, 'Path to ledger file to use for checking for already imported transactions (also see \'old-transactions\' option)', short: 'l', type: :string
end

$config = LedgerBitcoin::Config.new(opts[:config])
$config[:ledger][:file] = opts[:ledger_file] unless opts[:ledger_file].nil?

bitstamp_asset_account = ARGV.shift
if(bitstamp_asset_account.nil? or bitstamp_asset_account.empty?)
  $stderr.puts 'Parameter <bitstamp assets account> must be specified.'
  $stderr.puts 'See help via \'-h\' for details.'
  exit 1
end
fee_expenses_account = ARGV.shift
if(fee_expenses_account.nil? or fee_expenses_account.empty?)
  $stderr.puts 'Parameter <bitstamp fees expenses account> must be specified.'
  $stderr.puts 'See help via \'-h\' for details.'
  exit 1
end

transactions_csv_file = ARGV.shift

unless(transactions_csv_file or ($config[:bitstamp][:credentials][:client_id] and $config[:bitstamp][:credentials][:api_key] and $config[:bitstamp][:credentials][:api_secret]))
  $stderr.puts 'API access requires API credentials in config file.'
  $stderr.puts 'Please specify all of bitstamp:credentials:client_id, bitstamp:credentials:api_key and bitstamp:credentials:api_secret in ' << opts[:config]
  exit 1
end
  
if(opts[:old_transactions])
  last_imported_transaction = nil
else
  last_imported_transaction = LedgerBitcoin::Ledger.last_matching_transaction("#{bitstamp_asset_account} and %import_source=bitstamp and %bitstamp_transaction_index", $config[:ledger][:file]).last
end

if(transactions_csv_file)
  transactions = LedgerBitcoin::Bitstamp.transactions_from_csv(transactions_csv_file, bitstamp_asset_account, fee_expenses_account)
else
  transactions = LedgerBitcoin::Bitstamp.transactions_from_api(bitstamp_asset_account, fee_expenses_account, $config[:bitstamp][:credentials][:client_id].to_s, $config[:bitstamp][:credentials][:api_key].to_s, $config[:bitstamp][:credentials][:api_secret].to_s, last_imported_transaction)
end

last_imported_transaction_found = ((not transactions_csv_file) or last_imported_transaction.nil?)
transactions.each do |transaction|
  if(not last_imported_transaction_found)
    last_imported_transaction_found = transaction.is_equal_to_ledger_posting?(last_imported_transaction)
    
    next
  end
  
  puts transaction.to_ledger
end
